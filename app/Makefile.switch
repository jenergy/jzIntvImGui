#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#
# CONFIG_JSON is the filename of the NPDM config file (.json), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.json
#     - config.json
#   If a JSON file is provided or autodetected, an ExeFS PFS0 (.nsp) is built instead
#   of a homebrew executable (.nro). This is intended to be used for sysmodules.
#   NACP building is skipped as well.
#---------------------------------------------------------------------------------
TARGET		:=	jzIntvImGui
BUILD		:=	build-switch
SOURCES		:=	src/main/cpp
DATA		:=	data
INCLUDES	:=	include
#ROMFS	:=	romfs

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS	:=	-g -Wall -O2 -ffunction-sections \
			$(ARCH) $(DEFINES)

CFLAGS	+=	$(INCLUDE) -D__SWITCH__ -DUSE_SDL2 -DBYTE_LE -DNO_SETUID -DUSE_STRCASECMP -DNO_FCNTL -DUSE_FCNTL_H

CXXFLAGS	:= $(CFLAGS) -fno-rtti -fexceptions 
#-fno-exceptions

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= `aarch64-none-elf-pkg-config SDL2_ttf SDL2_image SDL2_gfx SDL2_mixer --libs` \
			-lglad -lEGL -lglfw3 -lglapi -ldrm_nouveau -lnx -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

#CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
#CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

# jzintv specific files
CFILES += jzintv/misc/file_crc32.c
CFILES += jzintv/misc/crc32.c
CFILES += jzintv/lzoe/lzoe.c
CFILES += jzintv/plat/plat_gen.c
CFILES += jzintv/minilzo/minilzo.c
CFILES += jzintv/jzintv.c
CFILES += jzintv/pads/pads_cgc_win32.c
CFILES += jzintv/pads/pads_intv2pc.c
CFILES += jzintv/cfg/cfg.c
CFILES += jzintv/cfg/usage.c
CFILES += jzintv/cfg/mapping.c
CFILES += jzintv/misc/crc16.c
CFILES += jzintv/misc/avl.c
CFILES += jzintv/misc/ll.c
CFILES += jzintv/misc/types.c
CFILES += jzintv/misc/jzprint.c
CFILES += jzintv/misc/printer.c
CFILES += jzintv/plat/gnu_getopt.c
CFILES += jzintv/event/event.c
CFILES += jzintv/event/event_tbl.c
CFILES += jzintv/gfx/palette.c
CFILES += jzintv/gfx/gfx.c
CFILES += jzintv/mvi/mvi.c
CFILES += jzintv/debug/debug.c
CFILES += jzintv/debug/debug_dasm1600.c
CFILES += jzintv/util/symtab.c
CFILES += jzintv/debug/source.c
CFILES += jzintv/periph/periph.c
CFILES += jzintv/cp1600/cp1600.c
CFILES += jzintv/cp1600/op_decode.c
CFILES += jzintv/cp1600/op_exec.c
CFILES += jzintv/cp1600/emu_link.c
CFILES += jzintv/cp1600/op_exec_ext.c
CFILES += jzintv/cp1600/req_q.c
CFILES += jzintv/cp1600/tbl/fn_cond_br.c
CFILES += jzintv/cp1600/tbl/fn_dir_2op.c
CFILES += jzintv/cp1600/tbl/fn_imm_2op.c
CFILES += jzintv/cp1600/tbl/fn_impl_1op_a.c
CFILES += jzintv/cp1600/tbl/fn_impl_1op_b.c
CFILES += jzintv/cp1600/tbl/fn_ind_2op.c
CFILES += jzintv/cp1600/tbl/fn_reg_1op.c
CFILES += jzintv/cp1600/tbl/fn_reg_2op.c
CFILES += jzintv/cp1600/tbl/fn_rot_1op.c
CFILES += jzintv/cp1600/tbl/formats.c
CFILES += jzintv/mem/mem.c
CFILES += jzintv/icart/icart.c
CFILES += jzintv/icart/icartrom.c
CFILES += jzintv/icart/icartbin.c
CFILES += jzintv/icart/icartfile.c
CFILES += jzintv/icart/icarttag.c
CFILES += jzintv/icart/icarttag_authors.c
CFILES += jzintv/icart/icarttag_printer.c
CFILES += jzintv/stic/stic.c
CFILES += jzintv/pads/pads.c
CFILES += jzintv/pads/pads_cgc.c
CFILES += jzintv/ay8910/ay8910.c
CFILES += jzintv/ecs/ecs.c
CFILES += jzintv/ivoice/ivoice.c
CFILES += jzintv/speed/speed.c
CFILES += jzintv/file/file.c
CFILES += jzintv/file/elfi.c
CFILES += jzintv/metadata/metadata.c
CFILES += jzintv/metadata/cfgvar_metadata.c
CFILES += jzintv/metadata/icarttag_metadata.c
CFILES += jzintv/metadata/print_metadata.c
CFILES += jzintv/bincfg/bincfg.c
CFILES += jzintv/bincfg/bincfg_lex.c
CFILES += jzintv/bincfg/bincfg_grmr.tab.c
CFILES += jzintv/bincfg/legacy.c
CFILES += jzintv/gif/gif_enc.c
CFILES += jzintv/gif/lzw_enc.c
CFILES += jzintv/demo/demo.c
CFILES += jzintv/name/name.c
CFILES += jzintv/name/name_list.c
CFILES += jzintv/serializer/serializer.c
CFILES += jzintv/jlp/jlp.c
CFILES += jzintv/scale/scale2x.c
CFILES += jzintv/scale/scale3x.c
CFILES += jzintv/zlib/deflate.c
CFILES += jzintv/zlib/adler32.c
CFILES += jzintv/zlib/trees.c
CFILES += jzintv/zlib/zutil.c
CFILES += jzintv/avi/avi.c
CFILES += jzintv/cheat/cheat.c
CFILES += jzintv/plat/plat_sdl.c
CFILES += jzintv/plat/plat_lib.c
CFILES += jzintv/event/event_sdl.c
CFILES += jzintv/event/event_sdl2.c
CFILES += jzintv/gfx/gfx_sdl2.c
CFILES += jzintv/gfx/gfx_scale.c
CFILES += jzintv/gfx/gfx_prescale.c
CFILES += jzintv/snd/snd_sdl.c
CFILES += jzintv/joy/joy_sdl.c
CFILES += jzintv/mouse/mouse_sdl.c
CFILES += jzintv/svn_revision.c

CPPFILES += jzintv/locutus/locutus.cpp
CPPFILES += jzintv/locutus/luigi.cpp
CPPFILES += jzintv/locutus/locutus_adapt.cpp
CPPFILES += jzintv/locutus/locutus_types.cpp
CPPFILES += jzintv/locutus/loc_to_bin.cpp
CPPFILES += jzintv/locutus/bin_to_loc.cpp
CPPFILES += jzintv/locutus/rom_to_loc.cpp

CPPFILES += main.cpp
CPPFILES += strings.cpp
CPPFILES += imgui_scrollable.cpp
CPPFILES += ../$(BUILD)/libs/imgui_impl/switch/plat_switch.cpp
CPPFILES += ../$(BUILD)/libs/imgui/imgui.cpp
CPPFILES += ../$(BUILD)/libs/imgui/imgui_draw.cpp
CPPFILES += ../$(BUILD)/libs/imgui/imgui_widgets.cpp
CPPFILES += ../$(BUILD)/libs/imgui/imgui_demo.cpp
CPPFILES += ../$(BUILD)/libs/imgui_impl/switch/imgui_impl_glfw_switch.cpp
CPPFILES += ../$(BUILD)/libs/imgui_impl/switch/imgui_impl_opengl3.cpp

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)\
			-I$(CURDIR)/$(SOURCES) \
			-I$(CURDIR)/libs/imgui \
			-I$(CURDIR)/libs/imgui_impl/switch \
			-I$(CURDIR)/libs/SDL2-2.0.12/include \
			-I$(CURDIR)/$(SOURCES)/jzintv

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

ifeq ($(strip $(CONFIG_JSON)),)
	jsons := $(wildcard *.json)
	ifneq (,$(findstring $(TARGET).json,$(jsons)))
		export APP_JSON := $(TOPDIR)/$(TARGET).json
	else
		ifneq (,$(findstring config.json,$(jsons)))
			export APP_JSON := $(TOPDIR)/config.json
		endif
	endif
else
	export APP_JSON := $(TOPDIR)/$(CONFIG_JSON)
endif

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	mkdir -p $@/libs/imgui_impl/switch/
	cp libs/imgui_impl/switch/*.cpp $@/libs/imgui_impl/switch/
	mkdir -p $@/libs/imgui/
	cp libs/imgui/*.cpp $@/libs/imgui/
	mkdir -p $@/jzintv/asm
	mkdir -p $@/jzintv/avi
	mkdir -p $@/jzintv/ay8910
	mkdir -p $@/jzintv/bincfg
	mkdir -p $@/jzintv/build
	mkdir -p $@/jzintv/cfg
	mkdir -p $@/jzintv/cheat
	mkdir -p $@/jzintv/cp1600
	mkdir -p $@/jzintv/cp1600/tbl
	mkdir -p $@/jzintv/dasm
	mkdir -p $@/jzintv/debug
	mkdir -p $@/jzintv/demo
	mkdir -p $@/jzintv/ecs
	mkdir -p $@/jzintv/event
	mkdir -p $@/jzintv/file
	mkdir -p $@/jzintv/gfx
	mkdir -p $@/jzintv/gif
	mkdir -p $@/jzintv/hashmap
	mkdir -p $@/jzintv/icart
	mkdir -p $@/jzintv/imasm
	mkdir -p $@/jzintv/ivoice
	mkdir -p $@/jzintv/jlp
	mkdir -p $@/jzintv/jni_include
	mkdir -p $@/jzintv/joy
	mkdir -p $@/jzintv/locutus
	mkdir -p $@/jzintv/lzoe
	mkdir -p $@/jzintv/mem
	mkdir -p $@/jzintv/metadata
	mkdir -p $@/jzintv/minilzo
	mkdir -p $@/jzintv/misc
	mkdir -p $@/jzintv/mouse
	mkdir -p $@/jzintv/mvi
	mkdir -p $@/jzintv/name
	mkdir -p $@/jzintv/pads
	mkdir -p $@/jzintv/periph
	mkdir -p $@/jzintv/plat
	mkdir -p $@/jzintv/scale
	mkdir -p $@/jzintv/serializer
	mkdir -p $@/jzintv/snd
	mkdir -p $@/jzintv/speed
	mkdir -p $@/jzintv/stic
	mkdir -p $@/jzintv/util
	mkdir -p $@/jzintv/vutil
	mkdir -p $@/jzintv/zlib
	
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.switch

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
ifeq ($(strip $(APP_JSON)),)
	@rm -fr $(BUILD) $(TARGET).nro $(TARGET).nacp $(TARGET).elf
else
	@rm -fr $(BUILD) $(TARGET).nsp $(TARGET).nso $(TARGET).npdm $(TARGET).elf
endif


#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
ifeq ($(strip $(APP_JSON)),)

all	:	$(OUTPUT).nro

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

else

all	:	$(OUTPUT).nsp

$(OUTPUT).nsp	:	$(OUTPUT).nso $(OUTPUT).npdm

$(OUTPUT).nso	:	$(OUTPUT).elf

endif

$(OUTPUT).elf	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
